<?xml version="1.0" encoding="utf-8"?>
<gpc defaultLocale="en_US" version="4" keySequence="15" currentLocale="en_US">
  <product appid="PHSP" version="13" name="Photoshop CS6"/>
  <target id="PHSP-13"/>
  <ConfiguratorPanel name="WizBang" width="220" height="92" init="doInit" close="doClose" persistent="true" extensionId="com.configurator.WizBang" extensionVersion="1.0.0" menuName="WizBang" flyoutMenuAbout="$$$/Configurator/FlyoutMenu/about" normalIcon="res/ext_icon.png" darkNormalIcon="res/res0_ext_icon.png">
    <onInit><![CDATA[]]></onInit>
    <aboutBox><![CDATA[]]></aboutBox>
    <extensionDescription><![CDATA[Converts Layer names to optimized web images automaticallyTurns a photoshop layer named: "{retina:true}logo.mini.png" into a transparent web optimized PNG named "logo.mini.png" and creates 2x retina version named "logo.mini@2x.png" in a folder that you specify... All with correct dimensions and flattened layers styles.Layer name into image! Behold!]]></extensionDescription>
    <extensionAuthor><![CDATA[Samcreate]]></extensionAuthor>
    <onClose><![CDATA[]]></onClose>
    <eventListeners>
      <function id="doInit" actionType="jsfunction" jsFunctionName="invoke_script">
        <param id="onInit"/>
      </function>
      <function id="doClose" actionType="jsfunction" jsFunctionName="invoke_script">
        <param id="onClose"/>
      </function>
    </eventListeners>
    <text _itemId="widget_text" toolTip="$$$/Configurator/Widget/Text/desc" styleName="scopeTextArea" width="220" height="36" backgroundAlpha="0" cfgVisible="$$$/Configurator/Attribute/visible/value###11" fontFamily="League Gothic" fontSize="24" color="0xffffff" fontWeight="bold" fontStyle="normal" textDecoration="none" textAlign="center" backgroundColor="16777215" borderColor="12040892" borderStyle="solid" borderThickness="0" dropShadowEnabled="false" x="0" y="0">
      <text><![CDATA[$$$/Configurator/key_###12]]></text>
    </text>
    <ps_script _itemId="ps_actionscript_script" label="$$$/Configurator/ActionScript/Script/name###13" toolTip="$$$/Configurator/ActionScript/Script/desc###14" cfgVisible="$$$/Configurator/Attribute/visible/value###15" click="onClick" icon="ps_script" overIcon="ps_script_r" showIcon="false" x="64" y="45" width="91" height="21">
      <script><![CDATA[var wizbang = {};wizbang.global = {    original_doc: app.activeDocument,    export_folder: null};wizbang.util = function(){            var self = {                rasterizeLayerStyle : function(){                    var idrasterizeLayer = stringIDToTypeID( "rasterizeLayer" );                    var desc5 = new ActionDescriptor();                    var idnull = charIDToTypeID( "null" );                    var ref4 = new ActionReference();                    var idLyr = charIDToTypeID( "Lyr " );                    var idOrdn = charIDToTypeID( "Ordn" );                    var idTrgt = charIDToTypeID( "Trgt" );                    ref4.putEnumerated( idLyr, idOrdn, idTrgt );                    desc5.putReference( idnull, ref4 );                    var idWhat = charIDToTypeID( "What" );                    var idrasterizeItem = stringIDToTypeID( "rasterizeItem" );                    var idlayerStyle = stringIDToTypeID( "layerStyle" );                    desc5.putEnumerated( idWhat, idrasterizeItem, idlayerStyle );                    executeAction( idrasterizeLayer, desc5, DialogModes.NO );                },                            getWH : function(layer){                    var width =  (layer.bounds[2]-layer.bounds[0]);                    var height = (layer.bounds[3]-layer.bounds[1]);                    return {w:width,h:height};                },                            hexToRgb : function(hex) {                    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);                    return result ? {                        r: parseInt(result[1], 16),                        g: parseInt(result[2], 16),                        b: parseInt(result[3], 16)                    } : null;                },                dup_doc : function(w,h,layer, retina){                    app.activeDocument = wizbang.global.original_doc;                    wizbang.global.original_doc.activeLayer = layer;                    var activeLay = wizbang.global.original_doc.activeLayer;                    var newLayer = activeLay.duplicate();                    var scale = (retina == true ? 2 : 1);                    newLayer.name = "__dup_rast";                    wizbang.global.original_doc.activeLayer = newLayer;                    if(retina){                        newLayer.translate(new UnitValue(0-newLayer.bounds[0].as('px'),'px'), new UnitValue(0-newLayer.bounds[1].as('px'),'px'));                        newLayer.resize( 200,200,AnchorPosition.TOPLEFT);                    }                    newLayer.rasterize(RasterizeType.ENTIRELAYER);                    wizbang.util.rasterizeLayerStyle();                    newLayer.copy();                    var myNewDoc = app.documents.add(w*scale,h*scale,72,"exportedLayer", NewDocumentMode.RGB,DocumentFill.TRANSPARENT);                    var targetLayer = myNewDoc.artLayers.add();                    myNewDoc.paste();                    targetLayer.opacity = activeLay.opacity;                    myNewDoc.trim(TrimType.TRANSPARENT);                    app.activeDocument = wizbang.global.original_doc;                    newLayer.remove();                    return myNewDoc;                },                trim : function(str) {                    return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');                }                        };                return self;        }();wizbang.imageTypes = function(){        var self = {                export_png : function(layer, imageName, uopt){                    var size = wizbang.util.getWH(layer);                    var doc = wizbang.util.dup_doc(size.w, size.h,layer);                                        uopt.png8 = uopt.png8 || false;                    uopt.matte = uopt.matte || false;                    uopt.retina =  uopt.retina || false;                                                            var options = new ExportOptionsSaveForWeb();                    options.format = SaveDocumentType.PNG;                    options.PNG8 = uopt.png8;                                        if(uopt.matte){                        var colors = wizbang.util.hexToRgb(uopt.matte);                        var matteColor = new RGBColor();                        matteColor.red = colors.r;                        matteColor.green = colors.g;                        matteColor.blue = colors.b;                        options.matteColor = matteColor;                    }                                        options.transparency = uopt.transparency || true;                                        finish(doc, imageName, options, uopt, size, layer);                                        $.writeln("export_png called! name: "+imageName);                },                export_jpg : function(layer, imageName, uopt){                    var size = wizbang.util.getWH(layer);                    var doc = wizbang.util.dup_doc(size.w, size.h,layer);                                        uopt.retina =  uopt.retina || false;                    uopt.quality = uopt.quality || 80;                                        var options = new ExportOptionsSaveForWeb();                    options.format = SaveDocumentType.JPEG;                    options.quality = uopt.quality;                                        finish(doc, imageName, options, uopt, size, layer);                                        $.writeln("export_jpg called! name: "+imageName);                },                export_gif : function(layer, imageName, uopt){                    var size = wizbang.util.getWH(layer);                    var doc = wizbang.util.dup_doc(size.w, size.h,layer);                    var options = new ExportOptionsSaveForWeb();                    uopt.retina =  uopt.retina || false;                    uopt.matte = uopt.matte || false;                                        options.ditherAmount = 0;                     options.dither = Dither.NOISE;                     options.palette = Palette.LOCALADAPTIVE;                     options.format = SaveDocumentType.COMPUSERVEGIF;                                         if(uopt.matte){                        var colors = wizbang.util.hexToRgb(uopt.matte);                        var matteColor = new RGBColor();                        matteColor.red = colors.r;                        matteColor.green = colors.g;                        matteColor.blue = colors.b;                        options.matteColor = matteColor;                    }                                        finish(doc, imageName, options, uopt, size, layer);                                        $.writeln("export_gif called! name: "+imageName);                }        };                return self;                function finish(doc, imageName, options, uopt, size, layer){            wizbang.app.final_save_step(doc,imageName,options);            if (uopt.retina) {                    var retina_doc = wizbang.util.dup_doc(size.w, size.h,layer, true);                    wizbang.app.final_save_step(retina_doc,imageName,options, true);            }        }           }();wizbang.app = function(){        var flag = 0;        var self = {                run : function(){                    wizbang.global.export_folder = Folder.selectDialog("Select a folder to export images");                    findImageLayers(app.activeDocument.layerSets);                },                final_save_step : function(doc,imageName,options, retina){                    app.activeDocument = doc;                                        if(retina){                        var first = imageName.substring(0, imageName.length -4);                        var last = imageName.substring(imageName.length -4, imageName.length);                        imageName = first+'@2x'+last;                    }                    imageName = wizbang.util.trim(imageName);                    doc.exportDocument(File(wizbang.global.export_folder+'/'+ imageName),ExportType.SAVEFORWEB, options);                    doc.close (SaveOptions.DONOTSAVECHANGES);                    app.activeDocument = wizbang.global.original_doc;                }        };                return self;                function findImageLayers(layerNode) {            for (var i=0; i<layerNode.length; i++) {                findImageLayers(layerNode[i].layerSets);                for(var layerIndex=0; layerIndex < layerNode[i].artLayers.length; layerIndex++) {                    var layer=layerNode[i].artLayers[layerIndex];                    var theRegEx = new RegExp(/\.(gif|jpg|jpeg|tiff|png)$/i);                    if(theRegEx.test(layer.name)){                        var name_parts = layer.name.split('.');                        var type = name_parts[ (name_parts.length-1) ];                                        var export_function = "export_"+type.toLowerCase();                        var options = layer.name.match(/\{(.*?)\}/);                        var imageName = layer.name.split('}')[1] || layer.name;                        try {                            var options = eval("(" + options[0] + ")");                        }catch(e) {                             var options = {};                        }                                                try {                            if(flag==0){                                wizbang.imageTypes[export_function](layer, imageName, options);                                                            }                        }catch(e){                         $.writeln(e);                            }                                            }                }            }        }           }();app.activeDocument.suspendHistory ('Wizbang Export', 'wizbang.app.run()');]]></script>
      <eventListeners>
        <function id="onClick" actionType="jsfunction" jsFunctionName="ps_invoke_script">
          <param id="script"/>
        </function>
      </eventListeners>
    </ps_script>
    <watermark height="17" x="$$$/Configurator/watermark/x" width="$$$/Configurator/watermark/width" bottom="0" right="0" y="75">
      <htmlText><![CDATA[$$$/Configurator/watermark/htmlText]]></htmlText>
    </watermark>
  </ConfiguratorPanel>
</gpc>